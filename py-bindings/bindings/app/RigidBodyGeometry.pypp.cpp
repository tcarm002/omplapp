// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/app.h"
#include "RigidBodyGeometry.pypp.hpp"

namespace bp = boost::python;

struct RigidBodyGeometry_wrapper : ompl::app::RigidBodyGeometry, bp::wrapper< ompl::app::RigidBodyGeometry > {

    RigidBodyGeometry_wrapper(ompl::app::RigidBodyGeometry const & arg )
    : ompl::app::RigidBodyGeometry( arg )
      , bp::wrapper< ompl::app::RigidBodyGeometry >(){
        // copy constructor
        
    }

    RigidBodyGeometry_wrapper(::ompl::app::MotionModel mtype, ::ompl::app::CollisionChecker ctype )
    : ompl::app::RigidBodyGeometry( mtype, ctype )
      , bp::wrapper< ompl::app::RigidBodyGeometry >(){
        // constructor
    
    }

    RigidBodyGeometry_wrapper(::ompl::app::MotionModel mtype )
    : ompl::app::RigidBodyGeometry( mtype )
      , bp::wrapper< ompl::app::RigidBodyGeometry >(){
        // constructor
    
    }

    void computeGeometrySpecification(  ){
        ompl::app::RigidBodyGeometry::computeGeometrySpecification(  );
    }

};

void register_RigidBodyGeometry_class(){

    { //::ompl::app::RigidBodyGeometry
        typedef bp::class_< RigidBodyGeometry_wrapper > RigidBodyGeometry_exposer_t;
        RigidBodyGeometry_exposer_t RigidBodyGeometry_exposer = RigidBodyGeometry_exposer_t( "RigidBodyGeometry", bp::init< ompl::app::MotionModel, ompl::app::CollisionChecker >(( bp::arg("mtype"), bp::arg("ctype") )) );
        bp::scope RigidBodyGeometry_scope( RigidBodyGeometry_exposer );
        RigidBodyGeometry_exposer.def( bp::init< ompl::app::MotionModel >(( bp::arg("mtype") )) );
        bp::implicitly_convertible< ompl::app::MotionModel, ompl::app::RigidBodyGeometry >();
        { //::ompl::app::RigidBodyGeometry::allocStateValidityChecker
        
            typedef ::ompl::base::StateValidityCheckerPtr const & ( ::ompl::app::RigidBodyGeometry::*allocStateValidityChecker_function_type)( ::ompl::base::SpaceInformationPtr const &,::ompl::app::GeometricStateExtractor const &,bool ) ;
            
            RigidBodyGeometry_exposer.def( 
                "allocStateValidityChecker"
                , allocStateValidityChecker_function_type( &::ompl::app::RigidBodyGeometry::allocStateValidityChecker )
                , ( bp::arg("si"), bp::arg("se"), bp::arg("selfCollision") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::app::RigidBodyGeometry::computeGeometrySpecification
        
            typedef void ( RigidBodyGeometry_wrapper::*computeGeometrySpecification_function_type)(  ) ;
            
            RigidBodyGeometry_exposer.def( 
                "computeGeometrySpecification"
                , computeGeometrySpecification_function_type( &RigidBodyGeometry_wrapper::computeGeometrySpecification ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::getBoundsAddition
        
            typedef double ( ::ompl::app::RigidBodyGeometry::*getBoundsAddition_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getBoundsAddition"
                , getBoundsAddition_function_type( &::ompl::app::RigidBodyGeometry::getBoundsAddition ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::getBoundsFactor
        
            typedef double ( ::ompl::app::RigidBodyGeometry::*getBoundsFactor_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getBoundsFactor"
                , getBoundsFactor_function_type( &::ompl::app::RigidBodyGeometry::getBoundsFactor ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::getCollisionCheckerType
        
            typedef ::ompl::app::CollisionChecker ( ::ompl::app::RigidBodyGeometry::*getCollisionCheckerType_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getCollisionCheckerType"
                , getCollisionCheckerType_function_type( &::ompl::app::RigidBodyGeometry::getCollisionCheckerType ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::getGeometrySpecification
        
            typedef ::ompl::app::GeometrySpecification const & ( ::ompl::app::RigidBodyGeometry::*getGeometrySpecification_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getGeometrySpecification"
                , getGeometrySpecification_function_type( &::ompl::app::RigidBodyGeometry::getGeometrySpecification )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::app::RigidBodyGeometry::getLoadedRobotCount
        
            typedef unsigned int ( ::ompl::app::RigidBodyGeometry::*getLoadedRobotCount_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getLoadedRobotCount"
                , getLoadedRobotCount_function_type( &::ompl::app::RigidBodyGeometry::getLoadedRobotCount ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::getMotionModel
        
            typedef ::ompl::app::MotionModel ( ::ompl::app::RigidBodyGeometry::*getMotionModel_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getMotionModel"
                , getMotionModel_function_type( &::ompl::app::RigidBodyGeometry::getMotionModel ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::getRobotCenter
        
            typedef ::aiVector3D ( ::ompl::app::RigidBodyGeometry::*getRobotCenter_function_type)( unsigned int ) const;
            
            RigidBodyGeometry_exposer.def( 
                "getRobotCenter"
                , getRobotCenter_function_type( &::ompl::app::RigidBodyGeometry::getRobotCenter )
                , ( bp::arg("robotIndex") ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::hasEnvironment
        
            typedef bool ( ::ompl::app::RigidBodyGeometry::*hasEnvironment_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "hasEnvironment"
                , hasEnvironment_function_type( &::ompl::app::RigidBodyGeometry::hasEnvironment ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::hasRobot
        
            typedef bool ( ::ompl::app::RigidBodyGeometry::*hasRobot_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "hasRobot"
                , hasRobot_function_type( &::ompl::app::RigidBodyGeometry::hasRobot ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::inferEnvironmentBounds
        
            typedef ::ompl::base::RealVectorBounds ( ::ompl::app::RigidBodyGeometry::*inferEnvironmentBounds_function_type)(  ) const;
            
            RigidBodyGeometry_exposer.def( 
                "inferEnvironmentBounds"
                , inferEnvironmentBounds_function_type( &::ompl::app::RigidBodyGeometry::inferEnvironmentBounds ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::setBoundsAddition
        
            typedef void ( ::ompl::app::RigidBodyGeometry::*setBoundsAddition_function_type)( double ) ;
            
            RigidBodyGeometry_exposer.def( 
                "setBoundsAddition"
                , setBoundsAddition_function_type( &::ompl::app::RigidBodyGeometry::setBoundsAddition )
                , ( bp::arg("add") ) );
        
        }
        { //::ompl::app::RigidBodyGeometry::setBoundsFactor
        
            typedef void ( ::ompl::app::RigidBodyGeometry::*setBoundsFactor_function_type)( double ) ;
            
            RigidBodyGeometry_exposer.def( 
                "setBoundsFactor"
                , setBoundsFactor_function_type( &::ompl::app::RigidBodyGeometry::setBoundsFactor )
                , ( bp::arg("factor") ) );
        
        }
        RigidBodyGeometry_exposer.def("setEnvironmentMesh",&::ompl::app::RigidBodyGeometry::setEnvironmentMesh);
        RigidBodyGeometry_exposer.def("addEnvironmentMesh",&::ompl::app::RigidBodyGeometry::addEnvironmentMesh);
        RigidBodyGeometry_exposer.def("setRobotMesh",&::ompl::app::RigidBodyGeometry::setRobotMesh);
        RigidBodyGeometry_exposer.def("addRobotMesh",&::ompl::app::RigidBodyGeometry::addRobotMesh);
        RigidBodyGeometry_exposer.def("setStateValidityCheckerType",&::ompl::app::RigidBodyGeometry::setStateValidityCheckerType);
    }

}
