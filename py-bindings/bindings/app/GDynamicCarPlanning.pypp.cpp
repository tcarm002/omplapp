// This file has been generated by Py++.

#include "boost/python.hpp"
#include "bindings/app.h"
#include "GDynamicCarPlanning.pypp.hpp"

namespace bp = boost::python;

struct GDynamicCarPlanning_wrapper : ompl::app::GDynamicCarPlanning, bp::wrapper< ompl::app::GDynamicCarPlanning > {

    GDynamicCarPlanning_wrapper( )
    : ompl::app::GDynamicCarPlanning( )
      , bp::wrapper< ompl::app::GDynamicCarPlanning >(){
        // null constructor
    
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->ompl::control::SimpleSetup::clear(  );
        }
    }
    
    void default_clear(  ) {
        ompl::control::SimpleSetup::clear( );
    }

    void computeGeometrySpecification(  ){
        ompl::app::RigidBodyGeometry::computeGeometrySpecification(  );
    }

    static ::ompl::control::ControlSpacePtr constructControlSpace(  ){
        return ompl::app::DynamicCarPlanning::constructControlSpace(  );
    }

    static ::ompl::base::StateSpacePtr constructStateSpace(  ){
        return ompl::app::DynamicCarPlanning::constructStateSpace(  );
    }

    virtual ::ompl::base::ScopedState< ompl::base::StateSpace > getDefaultStartState(  ) const  {
        if( bp::override func_getDefaultStartState = this->get_override( "getDefaultStartState" ) )
            return func_getDefaultStartState(  );
        else{
            return this->ompl::app::DynamicCarPlanning::getDefaultStartState(  );
        }
    }
    
    ::ompl::base::ScopedState< ompl::base::StateSpace > default_getDefaultStartState(  ) const  {
        return ompl::app::DynamicCarPlanning::getDefaultStartState( );
    }

    virtual ::ompl::base::ScopedState< ompl::base::StateSpace > getFullStateFromGeometricComponent( ::ompl::base::ScopedState< ompl::base::StateSpace > const & state ) const  {
        if( bp::override func_getFullStateFromGeometricComponent = this->get_override( "getFullStateFromGeometricComponent" ) )
            return func_getFullStateFromGeometricComponent( boost::ref(state) );
        else{
            return this->ompl::app::DynamicCarPlanning::getFullStateFromGeometricComponent( boost::ref(state) );
        }
    }
    
    ::ompl::base::ScopedState< ompl::base::StateSpace > default_getFullStateFromGeometricComponent( ::ompl::base::ScopedState< ompl::base::StateSpace > const & state ) const  {
        return ompl::app::DynamicCarPlanning::getFullStateFromGeometricComponent( boost::ref(state) );
    }

    virtual ::ompl::base::ScopedState< ompl::base::StateSpace > getGeometricComponentState( ::ompl::base::ScopedState< ompl::base::StateSpace > const & state, unsigned int index ) const  {
        if( bp::override func_getGeometricComponentState = this->get_override( "getGeometricComponentState" ) )
            return func_getGeometricComponentState( boost::ref(state), index );
        else{
            return this->ompl::app::AppBase< (ompl::app::AppType)1 >::getGeometricComponentState( boost::ref(state), index );
        }
    }
    
    ::ompl::base::ScopedState< ompl::base::StateSpace > default_getGeometricComponentState( ::ompl::base::ScopedState< ompl::base::StateSpace > const & state, unsigned int index ) const  {
        return ompl::app::AppBase< (ompl::app::AppType)1 >::getGeometricComponentState( boost::ref(state), index );
    }

    virtual ::ompl::base::State const * getGeometricComponentStateInternal( ::ompl::base::State const * state, unsigned int arg1 ) const {
        if( bp::override func_getGeometricComponentStateInternal = this->get_override( "getGeometricComponentStateInternal" ) )
            return func_getGeometricComponentStateInternal( boost::python::ptr(state), arg1 );
        else{
            return this->ompl::app::DynamicCarPlanning::getGeometricComponentStateInternal( boost::python::ptr(state), arg1 );
        }
    }
    
    virtual ::ompl::base::State const * default_getGeometricComponentStateInternal( ::ompl::base::State const * state, unsigned int arg1 ) const {
        return ompl::app::DynamicCarPlanning::getGeometricComponentStateInternal( boost::python::ptr(state), arg1 );
    }

    virtual unsigned int getRobotCount(  ) const  {
        if( bp::override func_getRobotCount = this->get_override( "getRobotCount" ) )
            return func_getRobotCount(  );
        else{
            return this->ompl::app::DynamicCarPlanning::getRobotCount(  );
        }
    }
    
    unsigned int default_getRobotCount(  ) const  {
        return ompl::app::DynamicCarPlanning::getRobotCount( );
    }

    virtual void inferEnvironmentBounds(  ) {
        if( bp::override func_inferEnvironmentBounds = this->get_override( "inferEnvironmentBounds" ) )
            func_inferEnvironmentBounds(  );
        else{
            this->ompl::app::AppBase< (ompl::app::AppType)1 >::inferEnvironmentBounds(  );
        }
    }
    
    void default_inferEnvironmentBounds(  ) {
        ompl::app::AppBase< (ompl::app::AppType)1 >::inferEnvironmentBounds( );
    }

    virtual void inferProblemDefinitionBounds(  ) {
        if( bp::override func_inferProblemDefinitionBounds = this->get_override( "inferProblemDefinitionBounds" ) )
            func_inferProblemDefinitionBounds(  );
        else{
            this->ompl::app::AppBase< (ompl::app::AppType)1 >::inferProblemDefinitionBounds(  );
        }
    }
    
    void default_inferProblemDefinitionBounds(  ) {
        ompl::app::AppBase< (ompl::app::AppType)1 >::inferProblemDefinitionBounds( );
    }

    virtual bool isSelfCollisionEnabled(  ) const  {
        if( bp::override func_isSelfCollisionEnabled = this->get_override( "isSelfCollisionEnabled" ) )
            return func_isSelfCollisionEnabled(  );
        else{
            return this->ompl::app::DynamicCarPlanning::isSelfCollisionEnabled(  );
        }
    }
    
    bool default_isSelfCollisionEnabled(  ) const  {
        return ompl::app::DynamicCarPlanning::isSelfCollisionEnabled( );
    }

    virtual void ode( ::std::vector< double > const & q, ::ompl::control::Control const * ctrl, ::std::vector< double > & qdot ){
        if( bp::override func_ode = this->get_override( "ode" ) )
            func_ode( boost::ref(q), boost::python::ptr(ctrl), boost::ref(qdot) );
        else{
            this->ompl::app::DynamicCarPlanning::ode( boost::ref(q), boost::python::ptr(ctrl), boost::ref(qdot) );
        }
    }
    
    virtual void default_ode( ::std::vector< double > const & q, ::ompl::control::Control const * ctrl, ::std::vector< double > & qdot ){
        ompl::app::DynamicCarPlanning::ode( boost::ref(q), boost::python::ptr(ctrl), boost::ref(qdot) );
    }

    virtual void postPropagate( ::ompl::base::State const * state, ::ompl::control::Control const * control, double const duration, ::ompl::base::State * result ){
        if( bp::override func_postPropagate = this->get_override( "postPropagate" ) )
            func_postPropagate( boost::python::ptr(state), boost::python::ptr(control), duration, boost::python::ptr(result) );
        else{
            this->ompl::app::DynamicCarPlanning::postPropagate( boost::python::ptr(state), boost::python::ptr(control), duration, boost::python::ptr(result) );
        }
    }
    
    virtual void default_postPropagate( ::ompl::base::State const * state, ::ompl::control::Control const * control, double const duration, ::ompl::base::State * result ){
        ompl::app::DynamicCarPlanning::postPropagate( boost::python::ptr(state), boost::python::ptr(control), duration, boost::python::ptr(result) );
    }

    virtual void setDefaultBounds(  ) {
        if( bp::override func_setDefaultBounds = this->get_override( "setDefaultBounds" ) )
            func_setDefaultBounds(  );
        else{
            this->ompl::app::DynamicCarPlanning::setDefaultBounds(  );
        }
    }
    
    void default_setDefaultBounds(  ) {
        ompl::app::DynamicCarPlanning::setDefaultBounds( );
    }

    virtual void setup(  ) {
        if( bp::override func_setup = this->get_override( "setup" ) )
            func_setup(  );
        else{
            this->ompl::app::AppBase< (ompl::app::AppType)1 >::setup(  );
        }
    }
    
    void default_setup(  ) {
        ompl::app::AppBase< (ompl::app::AppType)1 >::setup( );
    }

    virtual ::ompl::base::PlannerStatus solve( double time=1.0e+0 ) {
        if( bp::override func_solve = this->get_override( "solve" ) )
            return func_solve( time );
        else{
            return this->ompl::control::SimpleSetup::solve( time );
        }
    }
    
    ::ompl::base::PlannerStatus default_solve( double time=1.0e+0 ) {
        return ompl::control::SimpleSetup::solve( time );
    }

    virtual ::ompl::base::PlannerStatus solve( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        if( bp::override func_solve = this->get_override( "solve" ) )
            return func_solve( boost::ref(ptc) );
        else{
            return this->ompl::control::SimpleSetup::solve( boost::ref(ptc) );
        }
    }
    
    ::ompl::base::PlannerStatus default_solve( ::ompl::base::PlannerTerminationCondition const & ptc ) {
        return ompl::control::SimpleSetup::solve( boost::ref(ptc) );
    }

};

void register_GDynamicCarPlanning_class(){

    { //::ompl::app::GDynamicCarPlanning
        typedef bp::class_< GDynamicCarPlanning_wrapper, bp::bases< ompl::app::DynamicCarPlanning, ompl::app::RenderGeometry >, boost::noncopyable > GDynamicCarPlanning_exposer_t;
        GDynamicCarPlanning_exposer_t GDynamicCarPlanning_exposer = GDynamicCarPlanning_exposer_t( "GDynamicCarPlanning", bp::init< >() );
        bp::scope GDynamicCarPlanning_scope( GDynamicCarPlanning_exposer );
        { //::ompl::app::RigidBodyGeometry::computeGeometrySpecification
        
            typedef void ( GDynamicCarPlanning_wrapper::*computeGeometrySpecification_function_type)(  ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "computeGeometrySpecification"
                , computeGeometrySpecification_function_type( &GDynamicCarPlanning_wrapper::computeGeometrySpecification ) );
        
        }
        { //::ompl::app::DynamicCarPlanning::constructControlSpace
        
            typedef ::ompl::control::ControlSpacePtr ( *constructControlSpace_function_type )(  );
            
            GDynamicCarPlanning_exposer.def( 
                "constructControlSpace"
                , constructControlSpace_function_type( &GDynamicCarPlanning_wrapper::constructControlSpace ) );
        
        }
        { //::ompl::app::DynamicCarPlanning::constructStateSpace
        
            typedef ::ompl::base::StateSpacePtr ( *constructStateSpace_function_type )(  );
            
            GDynamicCarPlanning_exposer.def( 
                "constructStateSpace"
                , constructStateSpace_function_type( &GDynamicCarPlanning_wrapper::constructStateSpace ) );
        
        }
        { //::ompl::app::DynamicCarPlanning::getDefaultStartState
        
            typedef ::ompl::base::ScopedState< ompl::base::StateSpace > ( ::ompl::app::DynamicCarPlanning::*getDefaultStartState_function_type)(  ) const;
            typedef ::ompl::base::ScopedState< ompl::base::StateSpace > ( GDynamicCarPlanning_wrapper::*default_getDefaultStartState_function_type)(  ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "getDefaultStartState"
                , getDefaultStartState_function_type(&::ompl::app::DynamicCarPlanning::getDefaultStartState)
                , default_getDefaultStartState_function_type(&GDynamicCarPlanning_wrapper::default_getDefaultStartState) );
        
        }
        { //::ompl::app::DynamicCarPlanning::getFullStateFromGeometricComponent
        
            typedef ::ompl::base::ScopedState< ompl::base::StateSpace > ( ::ompl::app::DynamicCarPlanning::*getFullStateFromGeometricComponent_function_type)( ::ompl::base::ScopedState< ompl::base::StateSpace > const & ) const;
            typedef ::ompl::base::ScopedState< ompl::base::StateSpace > ( GDynamicCarPlanning_wrapper::*default_getFullStateFromGeometricComponent_function_type)( ::ompl::base::ScopedState< ompl::base::StateSpace > const & ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "getFullStateFromGeometricComponent"
                , getFullStateFromGeometricComponent_function_type(&::ompl::app::DynamicCarPlanning::getFullStateFromGeometricComponent)
                , default_getFullStateFromGeometricComponent_function_type(&GDynamicCarPlanning_wrapper::default_getFullStateFromGeometricComponent)
                , ( bp::arg("state") ) );
        
        }
        { //::ompl::app::AppBase< (ompl::app::AppType)1 >::getGeometricComponentState
        
            typedef ompl::app::GDynamicCarPlanning exported_class_t;
            typedef ::ompl::base::ScopedState< ompl::base::StateSpace > ( exported_class_t::*getGeometricComponentState_function_type)( ::ompl::base::ScopedState< ompl::base::StateSpace > const &,unsigned int ) const;
            typedef ::ompl::base::ScopedState< ompl::base::StateSpace > ( GDynamicCarPlanning_wrapper::*default_getGeometricComponentState_function_type)( ::ompl::base::ScopedState< ompl::base::StateSpace > const &,unsigned int ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "getGeometricComponentState"
                , getGeometricComponentState_function_type(&::ompl::app::AppBase< (ompl::app::AppType)1 >::getGeometricComponentState)
                , default_getGeometricComponentState_function_type(&GDynamicCarPlanning_wrapper::default_getGeometricComponentState)
                , ( bp::arg("state"), bp::arg("index") ) );
        
        }
        { //::ompl::app::DynamicCarPlanning::getGeometricComponentStateInternal
        
            typedef ::ompl::base::State const * ( GDynamicCarPlanning_wrapper::*getGeometricComponentStateInternal_function_type)( ::ompl::base::State const *,unsigned int ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "getGeometricComponentStateInternal"
                , getGeometricComponentStateInternal_function_type( &GDynamicCarPlanning_wrapper::default_getGeometricComponentStateInternal )
                , ( bp::arg("state"), bp::arg("arg1") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ompl::app::DynamicCarPlanning::getGeometricComponentStateSpace
        
            typedef ::ompl::base::StateSpacePtr const & ( ::ompl::app::DynamicCarPlanning::*getGeometricComponentStateSpace_function_type)(  ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "getGeometricComponentStateSpace"
                , getGeometricComponentStateSpace_function_type(&::ompl::app::DynamicCarPlanning::getGeometricComponentStateSpace)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::ompl::app::DynamicCarPlanning::getRobotCount
        
            typedef unsigned int ( ::ompl::app::DynamicCarPlanning::*getRobotCount_function_type)(  ) const;
            typedef unsigned int ( GDynamicCarPlanning_wrapper::*default_getRobotCount_function_type)(  ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "getRobotCount"
                , getRobotCount_function_type(&::ompl::app::DynamicCarPlanning::getRobotCount)
                , default_getRobotCount_function_type(&GDynamicCarPlanning_wrapper::default_getRobotCount) );
        
        }
        { //::ompl::app::AppBase< (ompl::app::AppType)1 >::inferEnvironmentBounds
        
            typedef ompl::app::GDynamicCarPlanning exported_class_t;
            typedef void ( exported_class_t::*inferEnvironmentBounds_function_type)(  ) ;
            typedef void ( GDynamicCarPlanning_wrapper::*default_inferEnvironmentBounds_function_type)(  ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "inferEnvironmentBounds"
                , inferEnvironmentBounds_function_type(&::ompl::app::AppBase< (ompl::app::AppType)1 >::inferEnvironmentBounds)
                , default_inferEnvironmentBounds_function_type(&GDynamicCarPlanning_wrapper::default_inferEnvironmentBounds) );
        
        }
        { //::ompl::app::AppBase< (ompl::app::AppType)1 >::inferProblemDefinitionBounds
        
            typedef ompl::app::GDynamicCarPlanning exported_class_t;
            typedef void ( exported_class_t::*inferProblemDefinitionBounds_function_type)(  ) ;
            typedef void ( GDynamicCarPlanning_wrapper::*default_inferProblemDefinitionBounds_function_type)(  ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "inferProblemDefinitionBounds"
                , inferProblemDefinitionBounds_function_type(&::ompl::app::AppBase< (ompl::app::AppType)1 >::inferProblemDefinitionBounds)
                , default_inferProblemDefinitionBounds_function_type(&GDynamicCarPlanning_wrapper::default_inferProblemDefinitionBounds) );
        
        }
        { //::ompl::app::DynamicCarPlanning::isSelfCollisionEnabled
        
            typedef bool ( ::ompl::app::DynamicCarPlanning::*isSelfCollisionEnabled_function_type)(  ) const;
            typedef bool ( GDynamicCarPlanning_wrapper::*default_isSelfCollisionEnabled_function_type)(  ) const;
            
            GDynamicCarPlanning_exposer.def( 
                "isSelfCollisionEnabled"
                , isSelfCollisionEnabled_function_type(&::ompl::app::DynamicCarPlanning::isSelfCollisionEnabled)
                , default_isSelfCollisionEnabled_function_type(&GDynamicCarPlanning_wrapper::default_isSelfCollisionEnabled) );
        
        }
        { //::ompl::app::DynamicCarPlanning::ode
        
            typedef void ( GDynamicCarPlanning_wrapper::*ode_function_type)( ::std::vector< double > const &,::ompl::control::Control const *,::std::vector< double > & ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "ode"
                , ode_function_type( &GDynamicCarPlanning_wrapper::default_ode )
                , ( bp::arg("q"), bp::arg("ctrl"), bp::arg("qdot") ) );
        
        }
        { //::ompl::app::DynamicCarPlanning::postPropagate
        
            typedef void ( GDynamicCarPlanning_wrapper::*postPropagate_function_type)( ::ompl::base::State const *,::ompl::control::Control const *,double const,::ompl::base::State * ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "postPropagate"
                , postPropagate_function_type( &GDynamicCarPlanning_wrapper::default_postPropagate )
                , ( bp::arg("state"), bp::arg("control"), bp::arg("duration"), bp::arg("result") ) );
        
        }
        { //::ompl::app::DynamicCarPlanning::setDefaultBounds
        
            typedef void ( ::ompl::app::DynamicCarPlanning::*setDefaultBounds_function_type)(  ) ;
            typedef void ( GDynamicCarPlanning_wrapper::*default_setDefaultBounds_function_type)(  ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "setDefaultBounds"
                , setDefaultBounds_function_type(&::ompl::app::DynamicCarPlanning::setDefaultBounds)
                , default_setDefaultBounds_function_type(&GDynamicCarPlanning_wrapper::default_setDefaultBounds) );
        
        }
        { //::ompl::app::AppBase< (ompl::app::AppType)1 >::setup
        
            typedef ompl::app::GDynamicCarPlanning exported_class_t;
            typedef void ( exported_class_t::*setup_function_type)(  ) ;
            typedef void ( GDynamicCarPlanning_wrapper::*default_setup_function_type)(  ) ;
            
            GDynamicCarPlanning_exposer.def( 
                "setup"
                , setup_function_type(&::ompl::app::AppBase< (ompl::app::AppType)1 >::setup)
                , default_setup_function_type(&GDynamicCarPlanning_wrapper::default_setup) );
        
        }
        GDynamicCarPlanning_exposer.staticmethod( "constructControlSpace" );
        GDynamicCarPlanning_exposer.staticmethod( "constructStateSpace" );
        GDynamicCarPlanning_exposer.def("solve", (::ompl::base::PlannerStatus(::ompl::app::GDynamicCarPlanning::*)( double ))(&::ompl::app::GDynamicCarPlanning::solve), (bp::arg("solveTime")) );
        GDynamicCarPlanning_exposer.def("solve", (::ompl::base::PlannerStatus(::ompl::app::GDynamicCarPlanning::*)( const ompl::base::PlannerTerminationCondition& ))(&::ompl::app::GDynamicCarPlanning::solve), (bp::arg("ptc")) );
        GDynamicCarPlanning_exposer.def("clear", &GDynamicCarPlanning_wrapper::clear);
        GDynamicCarPlanning_exposer.def("getStateSpace", &::ompl::control::SimpleSetup::getStateSpace, bp::return_value_policy< bp::copy_const_reference >());
    }

}
